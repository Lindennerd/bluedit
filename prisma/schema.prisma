// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String     @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Upvote        Upvote[]
  Downvote      Downvote[]
  Community     Community? @relation(fields: [communityId], references: [id])
  communityId   String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  title       String
  text        String
  image       String?
  label       Label[]
  author      User       @relation(fields: [userId], references: [id])
  replyToId   String
  replyTo     Post?      @relation("Replies", fields: [replyToId], references: [id])
  replies     Post[]     @relation("Replies")
  userId      String
  Upvote      Upvote[]
  Downvote    Downvote[]
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
}

model Upvote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  userId    String
  postId    String
}

model Downvote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  userId    String
  postId    String
}

model Label {
  id     String  @id @default(cuid())
  text   String
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

model Community {
  id        String   @id @default(cuid())
  name      String  @unique
  createdAt DateTime @default(now())
  members   User[]
  posts     Post[]
}
